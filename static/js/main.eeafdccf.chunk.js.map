{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","data","setData","query","setQuery","url","console","log","useEffect","axios","get","then","res","hits","response","style","textAlign","padding","width","height","type","placeholder","onChange","event","target","value","map","result","color","primary_artist","name","src","header_image_url","alt","onClick","img","Image","crossOrigin","onload","canvas","document","createElement","ctx","getContext","drawImage","a","download","href","toDataURL","click","downloadImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qOA8EeA,MA3Ef,WAAgB,IAAD,EACWC,IAAMC,SAAS,MAD1B,mBACNC,EADM,KACAC,EADA,OAEaH,IAAMC,SAAS,IAF5B,mBAENG,EAFM,KAECC,EAFD,KAMPC,EAAG,0CAAsCF,GAAtC,OAFP,kFAqCF,OAlCAG,QAAQC,IAAIF,GAEZN,IAAMS,WAAU,WACdC,IAAMC,IAAIL,GAAKM,MAAK,SAACC,GAAS,IACpBC,EAASD,EAAIX,KAAKa,SAAlBD,KAERX,EAAQW,QAET,CAACR,IA2BF,sBAAKU,MAAO,CAAEC,UAAW,SAAUC,QAAS,QAA5C,UACE,uBACEF,MAAO,CAAEC,UAAW,SAAUE,MAAO,OAAQC,OAAQ,QACrDC,KAAK,OACLC,YAAY,cACZC,SAVN,SAAsBC,GACpBnB,EAASmB,EAAMC,OAAOC,QAUlBA,MAAOtB,IAET,8BACGF,GACCA,EAAKyB,KACH,gBAAGC,EAAH,EAAGA,OAAH,OACExB,GACE,qCACE,oBAAIY,MAAO,CAAEa,MAAO,QAApB,4CAGA,6BAAKD,EAAOE,eAAeC,OAC3B,qBACEC,IAAKJ,EAAOK,iBACZC,IAAKN,EAAOE,eAAeC,KAC3BZ,MAAM,MACNC,OAAO,MACPe,QAAS,kBAhD3B,SAAuBH,GACrB,IAAMI,EAAM,IAAIC,MAChBD,EAAIE,YAAc,YAElBF,EAAIJ,IAAMA,EACVI,EAAIG,OAAS,WAEX,IAAMC,EAASC,SAASC,cAAc,UAChCC,EAAMH,EAAOI,WAAW,MAC9BJ,EAAOrB,MAAQiB,EAAIjB,MACnBqB,EAAOpB,OAASgB,EAAIhB,OACpBuB,EAAIE,UAAUT,EAAK,EAAG,GAEtB,IAAMU,EAAIL,SAASC,cAAc,KACjCI,EAAEC,SAAW,eACbD,EAAEE,KAAOR,EAAOS,UAAU,aAC1BH,EAAEI,SAgC2BC,CAAcvB,EAAOK,iCCxDzCmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASsB,eAAe,SAM1BX,M","file":"static/js/main.eeafdccf.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\n\nfunction App() {\n  const [data, setData] = React.useState(null);\n  const [query, setQuery] = React.useState(\"\");\n  const token =\n    \"&access_token=lo8Divul-fdFhQuQbCF-TL6nDRPgajxd80DEoSQoqGTjS5sCn_TCJWXDkGlbLQ1D\";\n\n  const url = `https://api.genius.com/search?q=${query}${token}`;\n  console.log(url);\n\n  React.useEffect(() => {\n    axios.get(url).then((res) => {\n      const { hits } = res.data.response;\n      // console.log(hits);\n      setData(hits);\n    });\n  }, [url]);\n\n  function downloadImage(src) {\n    const img = new Image();\n    img.crossOrigin = \"anonymous\"; // This tells the browser to request cross-origin access when trying to download the image data.\n    // ref: https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image#Implementing_the_save_feature\n    img.src = src;\n    img.onload = () => {\n      // create Canvas\n      const canvas = document.createElement(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx.drawImage(img, 0, 0);\n      // create a tag\n      const a = document.createElement(\"a\");\n      a.download = \"download.png\";\n      a.href = canvas.toDataURL(\"image/png\");\n      a.click();\n    };\n  }\n\n  function handleChange(event) {\n    setQuery(event.target.value);\n  }\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"16px\" }}>\n      <input\n        style={{ textAlign: \"center\", width: \"100%\", height: \"60px\" }}\n        type=\"text\"\n        placeholder=\"search here\"\n        onChange={handleChange}\n        value={query}\n      />\n      <div>\n        {data &&\n          data.map(\n            ({ result }) =>\n              query && (\n                <>\n                  <h6 style={{ color: \"gray\" }}>\n                    click on the image to download\n                  </h6>\n                  <h6>{result.primary_artist.name}</h6>\n                  <img\n                    src={result.header_image_url}\n                    alt={result.primary_artist.name}\n                    width=\"200\"\n                    height=\"200\"\n                    onClick={() => downloadImage(result.header_image_url)}\n                  />\n                </>\n              )\n          )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}